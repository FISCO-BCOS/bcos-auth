package com.webank.fb.auth.fbauthsdk.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Committee extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040523480156200001157600080fd5b5060405162001d3838038062001d38833981018060405281019080805182019291906020018051820192919060200180519060200190929190805190602001909291905050506000336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600090505b84518163ffffffff161015620001135762000105858263ffffffff16815181101515620000c757fe5b90602001906020020151858363ffffffff16815181101515620000e657fe5b906020019060200201516200016e640100000000026401000000009004565b80806001019150506200009e565b81600460016101000a81548160ff021916908360ff16021790555082600460006101000a81548160ff021916908360ff16021790555062000163336200039f640100000000026401000000009004565b505050505062000a56565b620001883362000471640100000000026401000000009004565b1515620001fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4f6e6c79206f776e65722100000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008163ffffffff1614156200028957600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549063ffffffff0219169055620002838260016200051c6401000000000262000dea179091906401000000009004565b6200039b565b620002ad826001620007746401000000000262000d9b179091906401000000009004565b15620003175780600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055506200039a565b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff16021790555062000399826001620007c3640100000000026200102c179091906401000000009004565b5b5b5050565b620003b93362000471640100000000026401000000009004565b15156200042e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4f6e6c79206f776e65722100000000000000000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60003073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620004b2576001905062000517565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000512576001905062000517565b600090505b919050565b60008060006200053c858562000774640100000000026401000000009004565b1515620005d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f4c6962416464726573735365743a2076616c756520646f65736e27742065786981526020017f73742e000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60018560000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540392506001856001018054905003915084600101828154811015156200063d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508085600101848154811015156200067d57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600183018560000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055846001018054809190600190036200076c9190620009ff565b505050505050565b6000808360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156200088f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f4c6962416464726573735365743a2076616c75652063616e277420626520307881526020017f300000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b620008aa828262000774640100000000026401000000009004565b15151562000946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f4c6962416464726573735365743a2076616c756520616c72656164792065786981526020017f73747320696e20746865207365742e000000000000000000000000000000000081525060400191505060405180910390fd5b816001018190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505081600101805490508260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b81548183558181111562000a295781836000526020600020918201910162000a28919062000a2e565b5b505050565b62000a5391905b8082111562000a4f57600081600090555060010162000a35565b5090565b90565b6112d28062000a666000396000f3006080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313af4035146100bf57806353bfcf2f146101025780635615696f146101c55780635e77fe20146101f6578063965b9ff1146102c457806399bc9c1b1461034a578063ac6c525114610387578063b2bdfa7b146103ea578063b6fd906714610441578063cd5d211814610472578063e43581b8146104cd578063f437695a14610528575b600080fd5b3480156100cb57600080fd5b50610100600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061057b565b005b34801561010e57600080fd5b506101a9600480360381019080803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929050505061063b565b604051808260ff1660ff16815260200191505060405180910390f35b3480156101d157600080fd5b506101da6106e4565b604051808260ff1660ff16815260200191505060405180910390f35b34801561020257600080fd5b5061020b6106f7565b604051808560ff1660ff1681526020018460ff1660ff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561026a57808201518184015260208101905061024f565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156102ac578082015181840152602081019050610291565b50505050905001965050505050505060405180910390f35b3480156102d057600080fd5b5061032860048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610815565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b34801561035657600080fd5b50610385600480360381019080803560ff169060200190929190803560ff1690602001909291905050506108b9565b005b34801561039357600080fd5b506103c8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610970565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b3480156103f657600080fd5b506103ff6109c9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561044d57600080fd5b506104566109ee565b604051808260ff1660ff16815260200191505060405180910390f35b34801561047e57600080fd5b506104b3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a01565b604051808215151515815260200191505060405180910390f35b3480156104d957600080fd5b5061050e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610aa8565b604051808215151515815260200191505060405180910390f35b34801561053457600080fd5b50610579600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803563ffffffff169060200190929190505050610ac5565b005b61058433610a01565b15156105f8576040517f08c379a000000000000000","000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4f6e6c79206f776e65722100000000000000000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060008061064a86610815565b925061065585610815565b8301915061066b6106666001610cb0565b610815565b9050600460009054906101000a900460ff1660ff16810263ffffffff166064830263ffffffff1610156106a157600193506106db565b81600460019054906101000a900460ff1660ff160263ffffffff166064840263ffffffff161015156106d657600293506106db565b600393505b50505092915050565b600460009054906101000a900460ff1681565b60008060608060006107096001610cb0565b9250825160405190808252806020026020018201604052801561073b5781602001602082028038833980820191505090505b509150600090505b82518110156107ea5760036000848381518110151561075e57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff1682828151811015156107c157fe5b9060200190602002019063ffffffff16908163ffffffff16815250508080600101915050610743565b600460019054906101000a900460ff169350600460009054906101000a900460ff1694505090919293565b6000806000809150600090505b83518163ffffffff1610156108af5760036000858363ffffffff1681518110151561084957fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff16820191508080600101915050610822565b8192505050919050565b6108c233610a01565b1515610936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4f6e6c79206f776e65722100000000000000000000000000000000000000000081525060200191505060405180910390fd5b80600460016101000a81548160ff021916908360ff16021790555081600460006101000a81548160ff021916908360ff1602179055505050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff169050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460019054906101000a900460ff1681565b60003073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a405760019050610aa3565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a9e5760019050610aa3565b600090505b919050565b6000610abe826001610d9b90919063ffffffff16565b9050919050565b610ace33610a01565b1515610b42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4f6e6c79206f776e65722100000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008163ffffffff161415610bbc57600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549063ffffffff0219169055610bb7826001610dea90919063ffffffff16565b610cac565b610bd0826001610d9b90919063ffffffff16565b15610c385780600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff160217905550610cab565b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff160217905550610caa82600161102c90919063ffffffff16565b5b5b5050565b60608060008360010180549050604051908082528060200260200182016040528015610ceb5781602001602082028038833980820191505090505b5091505b8360010180549050811015610d91578360010181815481101515610d0f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168282815181101515610d4857fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610cef565b8192505050919050565b6000808360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415905092915050565b6000806000610df98585610d9b565b1515610e93576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f4c6962416464726573735365743a2076616c756520646f65736e27742065786981526020017f73742e000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60018560000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054039250600185600101805490500391508460010182815481101515610ef857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050808560010184815481101515610f3757fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600183018560000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055846001018054809190600190036110249190611255565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156110f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f4c6962416464726573735365743a2076616c75652063616e277420626520307881526020017f300000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6111018282610d9b565b15151561119c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f4c6962416464726573735365743a2076616c756520616c72656164792065786981526020017f73747320696e20746865207365742e000000000000000000000000000000000081525060400191505060405180910390fd5b816001018190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505081600101805490508260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b81548183558181111561127c5781836000526020600020918201910161127b9190611281565b5b505050565b6112a391905b8082111561129f576000816000905550600101611287565b5090565b905600a165627a7a72305820c6f17db2de6703bbc760af2f4a5c671e9eb6cc13322cd89c95bb735df085d4fd0029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b5060405162001d3838038062001d38833981018060405281019080805182019291906020018051820192919060200180519060200190929190805190602001909291905050506000336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600090505b84518163ffffffff161015620001135762000105858263ffffffff16815181101515620000c757fe5b90602001906020020151858363ffffffff16815181101515620000e657fe5b906020019060200201516200016e640100000000026401000000009004565b80806001019150506200009e565b81600460016101000a81548160ff021916908360ff16021790555082600460006101000a81548160ff021916908360ff16021790555062000163336200039f640100000000026401000000009004565b505050505062000a56565b620001883362000471640100000000026401000000009004565b1515620001fd576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4f6e6c79206f776e65722100000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008163ffffffff1614156200028957600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549063ffffffff0219169055620002838260016200051c6401000000000262000d9b179091906401000000009004565b6200039b565b620002ad826001620007746401000000000262000fdd179091906401000000009004565b15620003175780600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055506200039a565b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff16021790555062000399826001620007c3640100000000026200102c179091906401000000009004565b5b5b5050565b620003b93362000471640100000000026401000000009004565b15156200042e576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4f6e6c79206f776e65722100000000000000000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60003073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620004b2576001905062000517565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000512576001905062000517565b600090505b919050565b60008060006200053c858562000774640100000000026401000000009004565b1515620005d7576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f4c6962416464726573735365743a2076616c756520646f65736e27742065786981526020017f73742e000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60018560000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540392506001856001018054905003915084600101828154811015156200063d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508085600101848154811015156200067d57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600183018560000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055846001018054809190600190036200076c9190620009ff565b505050505050565b6000808360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156200088f576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f4c6962416464726573735365743a2076616c75652063616e277420626520307881526020017f300000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b620008aa828262000774640100000000026401000000009004565b15151562000946576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f4c6962416464726573735365743a2076616c756520616c72656164792065786981526020017f73747320696e20746865207365742e000000000000000000000000000000000081525060400191505060405180910390fd5b816001018190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505081600101805490508260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b81548183558181111562000a295781836000526020600020918201910162000a28919062000a2e565b5b505050565b62000a5391905b8082111562000a4f57600081600090555060010162000a35565b5090565b90565b6112d28062000a666000396000f3006080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305282c70146100bf57806307f44999146101025780630e878ed01461013357806323bdace11461016457806328e91489146101ea57806358dd53d9146102415780636e0376d41461027e578063749280c7146102d95780638e2b0950146103a75780639067531d1461046a578063b5f23235146104bd578063c77695e414610518575b600080fd5b3480156100cb57600080fd5b50610100600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061057b565b005b34801561010e57600080fd5b5061011761063b565b604051808260ff1660ff16815260200191505060405180910390f35b34801561013f57600080fd5b5061014861064e565b604051808260ff1660ff16815260200191505060405180910390f35b34801561017057600080fd5b506101c860048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610661565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b3480156101f657600080fd5b506101ff610705565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024d57600080fd5b5061027c600480360381019080803560ff169060200190929190803560ff16906020019092919050505061072a565b005b34801561028a57600080fd5b506102bf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107e1565b604051808215151515815260200191505060405180910390f35b3480156102e557600080fd5b506102ee610888565b604051808560ff1660ff1681526020018460ff1660ff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561034d578082015181840152602081019050610332565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561038f578082015181840152602081019050610374565b50505050905001965050505050505060405180910390f35b3480156103b357600080fd5b5061044e60048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506109a6565b604051808260ff1660ff16815260200191505060405180910390f35b34801561047657600080fd5b506104bb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803563ffffffff169060200190929190505050610a4f565b005b3480156104c957600080fd5b506104fe600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c3a565b604051808215151515815260200191505060405180910390f35b34801561052457600080fd5b50610559600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c57565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b610584336107e1565b15156105f8576040517fc703cb1200000000000000","000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4f6e6c79206f776e65722100000000000000000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460019054906101000a900460ff1681565b600460009054906101000a900460ff1681565b6000806000809150600090505b83518163ffffffff1610156106fb5760036000858363ffffffff1681518110151561069557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff1682019150808060010191505061066e565b8192505050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610733336107e1565b15156107a7576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4f6e6c79206f776e65722100000000000000000000000000000000000000000081525060200191505060405180910390fd5b80600460016101000a81548160ff021916908360ff16021790555081600460006101000a81548160ff021916908360ff1602179055505050565b60003073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108205760019050610883565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561087e5760019050610883565b600090505b919050565b600080606080600061089a6001610cb0565b925082516040519080825280602002602001820160405280156108cc5781602001602082028038833980820191505090505b509150600090505b825181101561097b576003600084838151811015156108ef57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff16828281518110151561095257fe5b9060200190602002019063ffffffff16908163ffffffff168152505080806001019150506108d4565b600460019054906101000a900460ff169350600460009054906101000a900460ff1694505090919293565b6000806000806109b586610661565b92506109c085610661565b830191506109d66109d16001610cb0565b610661565b9050600460009054906101000a900460ff1660ff16810263ffffffff166064830263ffffffff161015610a0c5760019350610a46565b81600460019054906101000a900460ff1660ff160263ffffffff166064840263ffffffff16101515610a415760029350610a46565b600393505b50505092915050565b610a58336107e1565b1515610acc576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4f6e6c79206f776e65722100000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008163ffffffff161415610b4657600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549063ffffffff0219169055610b41826001610d9b90919063ffffffff16565b610c36565b610b5a826001610fdd90919063ffffffff16565b15610bc25780600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff160217905550610c35565b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff160217905550610c3482600161102c90919063ffffffff16565b5b5b5050565b6000610c50826001610fdd90919063ffffffff16565b9050919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff169050919050565b60608060008360010180549050604051908082528060200260200182016040528015610ceb5781602001602082028038833980820191505090505b5091505b8360010180549050811015610d91578360010181815481101515610d0f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168282815181101515610d4857fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610cef565b8192505050919050565b6000806000610daa8585610fdd565b1515610e44576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f4c6962416464726573735365743a2076616c756520646f65736e27742065786981526020017f73742e000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60018560000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054039250600185600101805490500391508460010182815481101515610ea957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050808560010184815481101515610ee857fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600183018560000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905584600101805480919060019003610fd59190611255565b505050505050565b6000808360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156110f7576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f4c6962416464726573735365743a2076616c75652063616e277420626520307881526020017f300000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6111018282610fdd565b15151561119c576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f4c6962416464726573735365743a2076616c756520616c72656164792065786981526020017f73747320696e20746865207365742e000000000000000000000000000000000081525060400191505060405180910390fd5b816001018190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505081600101805490508260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b81548183558181111561127c5781836000526020600020918201910161127b9190611281565b5b505050565b6112a391905b8082111561129f576000816000905550600101611287565b5090565b905600a165627a7a72305820fa7eba40af9b9acb0d383e7f796efca44647d3d8a38a8b0b327fad38878e3a5c0029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"agreeVoters\",\"type\":\"address[]\"},{\"name\":\"againstVoters\",\"type\":\"address[]\"}],\"name\":\"determineVoteResult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_participatesRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCommitteeInfo\",\"outputs\":[{\"name\":\"participatesRate\",\"type\":\"uint8\"},{\"name\":\"winRate\",\"type\":\"uint8\"},{\"name\":\"governors\",\"type\":\"address[]\"},{\"name\":\"weights\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"votes\",\"type\":\"address[]\"}],\"name\":\"getWeights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participatesRate\",\"type\":\"uint8\"},{\"name\":\"winRate\",\"type\":\"uint8\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"getWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_winRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"}],\"name\":\"auth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"governor\",\"type\":\"address\"},{\"name\":\"weight\",\"type\":\"uint32\"}],\"name\":\"setWeight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"governorList\",\"type\":\"address[]\"},{\"name\":\"weightList\",\"type\":\"uint32[]\"},{\"name\":\"participatesRate\",\"type\":\"uint8\"},{\"name\":\"winRate\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_DETERMINEVOTERESULT = "determineVoteResult";

    public static final String FUNC__PARTICIPATESRATE = "_participatesRate";

    public static final String FUNC_GETCOMMITTEEINFO = "getCommitteeInfo";

    public static final String FUNC_GETWEIGHTS = "getWeights";

    public static final String FUNC_SETRATE = "setRate";

    public static final String FUNC_GETWEIGHT = "getWeight";

    public static final String FUNC__OWNER = "_owner";

    public static final String FUNC__WINRATE = "_winRate";

    public static final String FUNC_AUTH = "auth";

    public static final String FUNC_ISGOVERNOR = "isGovernor";

    public static final String FUNC_SETWEIGHT = "setWeight";

    protected Committee(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt setOwner(String owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new Address(owner)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setOwner(String owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new Address(owner)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new Address(owner)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public BigInteger determineVoteResult(List<String> agreeVoters, List<String> againstVoters) throws ContractException {
        final Function function = new Function(FUNC_DETERMINEVOTERESULT, 
                Arrays.<Type>asList(agreeVoters.isEmpty()? DynamicArray.empty("address[]"):new DynamicArray<Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(agreeVoters, Address.class)),
                againstVoters.isEmpty()? DynamicArray.empty("address[]"):new DynamicArray<Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(againstVoters, Address.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger _participatesRate() throws ContractException {
        final Function function = new Function(FUNC__PARTICIPATESRATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple4<BigInteger, BigInteger, List<String>, List<BigInteger>> getCommitteeInfo() throws ContractException {
        final Function function = new Function(FUNC_GETCOMMITTEEINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint32>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<BigInteger, BigInteger, List<String>, List<BigInteger>>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<Address>) results.get(2).getValue()), 
                convertToNative((List<Uint32>) results.get(3).getValue()));
    }

    public BigInteger getWeights(List<String> votes) throws ContractException {
        final Function function = new Function(FUNC_GETWEIGHTS, 
                Arrays.<Type>asList(votes.isEmpty()? DynamicArray.empty("address[]"):new DynamicArray<Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(votes, Address.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setRate(BigInteger participatesRate, BigInteger winRate) {
        final Function function = new Function(
                FUNC_SETRATE, 
                Arrays.<Type>asList(new Uint8(participatesRate),
                new Uint8(winRate)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setRate(BigInteger participatesRate, BigInteger winRate, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETRATE, 
                Arrays.<Type>asList(new Uint8(participatesRate),
                new Uint8(winRate)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetRate(BigInteger participatesRate, BigInteger winRate) {
        final Function function = new Function(
                FUNC_SETRATE, 
                Arrays.<Type>asList(new Uint8(participatesRate),
                new Uint8(winRate)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getSetRateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETRATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger getWeight(String governor) throws ContractException {
        final Function function = new Function(FUNC_GETWEIGHT, 
                Arrays.<Type>asList(new Address(governor)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String _owner() throws ContractException {
        final Function function = new Function(FUNC__OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger _winRate() throws ContractException {
        final Function function = new Function(FUNC__WINRATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean auth(String src) throws ContractException {
        final Function function = new Function(FUNC_AUTH, 
                Arrays.<Type>asList(new Address(src)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public Boolean isGovernor(String governor) throws ContractException {
        final Function function = new Function(FUNC_ISGOVERNOR, 
                Arrays.<Type>asList(new Address(governor)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt setWeight(String governor, BigInteger weight) {
        final Function function = new Function(
                FUNC_SETWEIGHT, 
                Arrays.<Type>asList(new Address(governor),
                new Uint32(weight)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setWeight(String governor, BigInteger weight, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETWEIGHT, 
                Arrays.<Type>asList(new Address(governor),
                new Uint32(weight)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetWeight(String governor, BigInteger weight) {
        final Function function = new Function(
                FUNC_SETWEIGHT, 
                Arrays.<Type>asList(new Address(governor),
                new Uint32(weight)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetWeightInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETWEIGHT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public static Committee load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Committee(contractAddress, client, credential);
    }

    public static Committee deploy(Client client, CryptoKeyPair credential, List<String> governorList, List<BigInteger> weightList, BigInteger participatesRate, BigInteger winRate) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(governorList.isEmpty()? DynamicArray.empty("address[]"):new DynamicArray<Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(governorList, Address.class)),
                weightList.isEmpty()? DynamicArray.empty("uint32[]"):new DynamicArray<Uint32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(weightList, Uint32.class)),
                new Uint8(participatesRate),
                new Uint8(winRate)));
        return deploy(Committee.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }
}
